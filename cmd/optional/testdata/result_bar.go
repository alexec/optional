// Code generated by optional. DO NOT EDIT.

package testdata

import (
	"errors"
)

// resultBar is an result bar.
type resultBar struct {
	value *bar
	err   error
}

func NewResultBar(v bar, err error) resultBar {
	if err != nil {
		return ErrBar(err)
	} else {
		return OkBar(v)
	}
}

func NewResultBarPtr(v *bar, err error) resultBar {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrBar(err)
	} else {
		return OkBar(*v)
	}
}

func OkBar(v bar) resultBar {
	return resultBar{value: &v}
}

func ErrBar(err error) resultBar {
	return resultBar{err: err}
}

func (r resultBar) Value() bar {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r resultBar) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r resultBar) Get() (bar, error) {
	if r.value == nil {
		var zero bar
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r resultBar) Present() bool {
	return r.value != nil
}
