// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultUint32 is an result uint32.
type ResultUint32 struct {
	value *uint32
	err   error
}

func NewResultUint32(v uint32, err error) ResultUint32 {
	if err != nil {
		return ErrUint32(err)
	} else {
		return OkUint32(v)
	}
}

func NewResultUint32Ptr(v *uint32, err error) ResultUint32 {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrUint32(err)
	} else {
		return OkUint32(*v)
	}
}

func OkUint32(v uint32) ResultUint32 {
	return ResultUint32{value: &v}
}

func ErrUint32(err error) ResultUint32 {
	return ResultUint32{err: err}
}

func (r ResultUint32) Value() uint32 {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultUint32) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultUint32) Get() (uint32, error) {
	if r.value == nil {
		var zero uint32
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultUint32) Present() bool {
	return r.value != nil
}
