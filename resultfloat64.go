// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultFloat64 is an result float64.
type ResultFloat64 struct {
	value *float64
	err   error
}

func NewResultFloat64(v float64, err error) ResultFloat64 {
	if err != nil {
		return ErrFloat64(err)
	} else {
		return OkFloat64(v)
	}
}

func NewResultFloat64Ptr(v *float64, err error) ResultFloat64 {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrFloat64(err)
	} else {
		return OkFloat64(*v)
	}
}

func OkFloat64(v float64) ResultFloat64 {
	return ResultFloat64{value: &v}
}

func ErrFloat64(err error) ResultFloat64 {
	return ResultFloat64{err: err}
}

func (r ResultFloat64) Value() float64 {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultFloat64) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultFloat64) Get() (float64, error) {
	if r.value == nil {
		var zero float64
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultFloat64) Present() bool {
	return r.value != nil
}
