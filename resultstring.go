// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultString is an result string.
type ResultString struct {
	value *string
	err   error
}

func NewResultString(v string, err error) ResultString {
	if err != nil {
		return ErrString(err)
	} else {
		return OkString(v)
	}
}

func NewResultStringPtr(v *string, err error) ResultString {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrString(err)
	} else {
		return OkString(*v)
	}
}

func OkString(v string) ResultString {
	return ResultString{value: &v}
}

func ErrString(err error) ResultString {
	return ResultString{err: err}
}

func (r ResultString) Value() string {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultString) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultString) Get() (string, error) {
	if r.value == nil {
		var zero string
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultString) Present() bool {
	return r.value != nil
}
