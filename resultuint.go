// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultUint is an result uint.
type ResultUint struct {
	value *uint
	err   error
}

func NewResultUint(v uint, err error) ResultUint {
	if err != nil {
		return ErrUint(err)
	} else {
		return OkUint(v)
	}
}

func NewResultUintPtr(v *uint, err error) ResultUint {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrUint(err)
	} else {
		return OkUint(*v)
	}
}

func OkUint(v uint) ResultUint {
	return ResultUint{value: &v}
}

func ErrUint(err error) ResultUint {
	return ResultUint{err: err}
}

func (r ResultUint) Value() uint {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultUint) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultUint) Get() (uint, error) {
	if r.value == nil {
		var zero uint
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultUint) Present() bool {
	return r.value != nil
}
