// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultComplex128 is an result complex128.
type ResultComplex128 struct {
	value *complex128
	err   error
}

func NewResultComplex128(v complex128, err error) ResultComplex128 {
	if err != nil {
		return ErrComplex128(err)
	} else {
		return OkComplex128(v)
	}
}

func NewResultComplex128Ptr(v *complex128, err error) ResultComplex128 {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrComplex128(err)
	} else {
		return OkComplex128(*v)
	}
}

func OkComplex128(v complex128) ResultComplex128 {
	return ResultComplex128{value: &v}
}

func ErrComplex128(err error) ResultComplex128 {
	return ResultComplex128{err: err}
}

func (r ResultComplex128) Value() complex128 {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultComplex128) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultComplex128) Get() (complex128, error) {
	if r.value == nil {
		var zero complex128
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultComplex128) Present() bool {
	return r.value != nil
}
