// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultInt8 is an result int8.
type ResultInt8 struct {
	value *int8
	err   error
}

func NewResultInt8(v int8, err error) ResultInt8 {
	if err != nil {
		return ErrInt8(err)
	} else {
		return OkInt8(v)
	}
}

func NewResultInt8Ptr(v *int8, err error) ResultInt8 {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrInt8(err)
	} else {
		return OkInt8(*v)
	}
}

func OkInt8(v int8) ResultInt8 {
	return ResultInt8{value: &v}
}

func ErrInt8(err error) ResultInt8 {
	return ResultInt8{err: err}
}

func (r ResultInt8) Value() int8 {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultInt8) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultInt8) Get() (int8, error) {
	if r.value == nil {
		var zero int8
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultInt8) Present() bool {
	return r.value != nil
}
