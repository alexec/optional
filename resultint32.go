// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultInt32 is an result int32.
type ResultInt32 struct {
	value *int32
	err   error
}

func NewResultInt32(v int32, err error) ResultInt32 {
	if err != nil {
		return ErrInt32(err)
	} else {
		return OkInt32(v)
	}
}

func NewResultInt32Ptr(v *int32, err error) ResultInt32 {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrInt32(err)
	} else {
		return OkInt32(*v)
	}
}

func OkInt32(v int32) ResultInt32 {
	return ResultInt32{value: &v}
}

func ErrInt32(err error) ResultInt32 {
	return ResultInt32{err: err}
}

func (r ResultInt32) Value() int32 {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultInt32) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultInt32) Get() (int32, error) {
	if r.value == nil {
		var zero int32
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultInt32) Present() bool {
	return r.value != nil
}
