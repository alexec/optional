// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultBool is an result bool.
type ResultBool struct {
	value *bool
	err   error
}

func NewResultBool(v bool, err error) ResultBool {
	if err != nil {
		return ErrBool(err)
	} else {
		return OkBool(v)
	}
}

func NewResultBoolPtr(v *bool, err error) ResultBool {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrBool(err)
	} else {
		return OkBool(*v)
	}
}

func OkBool(v bool) ResultBool {
	return ResultBool{value: &v}
}

func ErrBool(err error) ResultBool {
	return ResultBool{err: err}
}

func (r ResultBool) Value() bool {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultBool) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultBool) Get() (bool, error) {
	if r.value == nil {
		var zero bool
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultBool) Present() bool {
	return r.value != nil
}
