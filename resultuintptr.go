// Code generated by optional. DO NOT EDIT.

package optional

import (
	"errors"
)

// ResultUintptr is an result uintptr.
type ResultUintptr struct {
	value *uintptr
	err   error
}

func NewResultUintptr(v uintptr, err error) ResultUintptr {
	if err != nil {
		return ErrUintptr(err)
	} else {
		return OkUintptr(v)
	}
}

func NewResultUintptrPtr(v *uintptr, err error) ResultUintptr {
	if v == nil && err == nil {
		panic("both value and err are nil")
	}
	if err != nil {
		return ErrUintptr(err)
	} else {
		return OkUintptr(*v)
	}
}

func OkUintptr(v uintptr) ResultUintptr {
	return ResultUintptr{value: &v}
}

func ErrUintptr(err error) ResultUintptr {
	return ResultUintptr{err: err}
}

func (r ResultUintptr) Value() uintptr {
	if r.value == nil {
		panic("value not present")
	}
	return *r.value
}

func (r ResultUintptr) Err() error {
	if r.err == nil {
		panic("err not present")
	}
	return r.err
}

func (r ResultUintptr) Get() (uintptr, error) {
	if r.value == nil {
		var zero uintptr
		return zero, errors.New("value not present")
	}
	return *r.value, nil
}

func (r ResultUintptr) Present() bool {
	return r.value != nil
}
